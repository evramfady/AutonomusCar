
iDrive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000246  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012a9  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ac  00000000  00000000  00001635  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e2  00000000  00000000  00001ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  000025c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c3  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026f  00000000  00000000  00002edb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000314a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  8a:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <motor_init>:
#include "motor_driver.h"
#include <util/delay.h>

void motor_init()
{
	Dio_ChannelDirectionSet(MOTORS_DIR, DIO_PIN0 , DIO_OUTPUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	8a e3       	ldi	r24, 0x3A	; 58
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 ab 00 	call	0x156	; 0x156 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(MOTORS_DIR, DIO_PIN1 , DIO_OUTPUT);
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	8a e3       	ldi	r24, 0x3A	; 58
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 ab 00 	call	0x156	; 0x156 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(MOTORS_DIR, DIO_PIN2 , DIO_OUTPUT);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	8a e3       	ldi	r24, 0x3A	; 58
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 ab 00 	call	0x156	; 0x156 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(MOTORS_DIR, DIO_PIN3 , DIO_OUTPUT);
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	63 e0       	ldi	r22, 0x03	; 3
  ba:	8a e3       	ldi	r24, 0x3A	; 58
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 ab 00 	call	0x156	; 0x156 <Dio_ChannelDirectionSet>
  c2:	08 95       	ret

000000c4 <motor_forward>:
}

void motor_forward()
{
	
	Dio_ChannelWrite(MOTORS_OUT,IN1,DIO_HIGH);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	8b e3       	ldi	r24, 0x3B	; 59
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 c9 00 	call	0x192	; 0x192 <Dio_ChannelWrite>
	Dio_ChannelWrite(MOTORS_OUT,IN2,DIO_LOW);
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	8b e3       	ldi	r24, 0x3B	; 59
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 c9 00 	call	0x192	; 0x192 <Dio_ChannelWrite>

	Dio_ChannelWrite(MOTORS_OUT,IN3,DIO_LOW);
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	62 e0       	ldi	r22, 0x02	; 2
  e0:	8b e3       	ldi	r24, 0x3B	; 59
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 c9 00 	call	0x192	; 0x192 <Dio_ChannelWrite>
	Dio_ChannelWrite(MOTORS_OUT,IN4,DIO_HIGH);
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	63 e0       	ldi	r22, 0x03	; 3
  ec:	8b e3       	ldi	r24, 0x3B	; 59
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 c9 00 	call	0x192	; 0x192 <Dio_ChannelWrite>
  f4:	08 95       	ret

000000f6 <__vector_1>:
	
    return Distance_cm;
}

ISR(INT0_vect)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
	
	if(i == 0)
 104:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 108:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 10c:	89 2b       	or	r24, r25
 10e:	51 f4       	brne	.+20     	; 0x124 <__vector_1+0x2e>
	{
		TCCR1B |= 1<<CS10;
 110:	8e b5       	in	r24, 0x2e	; 46
 112:	81 60       	ori	r24, 0x01	; 1
 114:	8e bd       	out	0x2e, r24	; 46
		i = 1;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 122:	0d c0       	rjmp	.+26     	; 0x13e <__vector_1+0x48>
	}
	else
	{
		TCCR1B = 0;
 124:	1e bc       	out	0x2e, r1	; 46
		pulse = TCNT1;
 126:	8c b5       	in	r24, 0x2c	; 44
 128:	9d b5       	in	r25, 0x2d	; 45
 12a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <pulse+0x1>
 12e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <pulse>
		TCNT1 = 0;
 132:	1d bc       	out	0x2d, r1	; 45
 134:	1c bc       	out	0x2c, r1	; 44
		i = 0;
 136:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 13a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <main>:
int main(void)
{
	//Sw_init(PORTD_DIR_REG,SW1);
   // ServoMotor_Init();
	//Ultrasonic_Init();
	motor_init();
 14c:	0e 94 49 00 	call	0x92	; 0x92 <motor_init>
		motor_forward();
	    } else {
		motor_brake();
	} */
	
	motor_forward();
 150:	0e 94 62 00 	call	0xc4	; 0xc4 <motor_forward>
 154:	fd cf       	rjmp	.-6      	; 0x150 <main+0x4>

00000156 <Dio_ChannelDirectionSet>:
 156:	44 23       	and	r20, r20
 158:	19 f0       	breq	.+6      	; 0x160 <Dio_ChannelDirectionSet+0xa>
 15a:	41 30       	cpi	r20, 0x01	; 1
 15c:	71 f0       	breq	.+28     	; 0x17a <Dio_ChannelDirectionSet+0x24>
 15e:	08 95       	ret
 160:	fc 01       	movw	r30, r24
 162:	40 81       	ld	r20, Z
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <Dio_ChannelDirectionSet+0x18>
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <Dio_ChannelDirectionSet+0x14>
 172:	20 95       	com	r18
 174:	24 23       	and	r18, r20
 176:	20 83       	st	Z, r18
 178:	08 95       	ret
 17a:	fc 01       	movw	r30, r24
 17c:	40 81       	ld	r20, Z
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <Dio_ChannelDirectionSet+0x32>
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <Dio_ChannelDirectionSet+0x2e>
 18c:	24 2b       	or	r18, r20
 18e:	20 83       	st	Z, r18
 190:	08 95       	ret

00000192 <Dio_ChannelWrite>:
 192:	44 23       	and	r20, r20
 194:	19 f0       	breq	.+6      	; 0x19c <Dio_ChannelWrite+0xa>
 196:	41 30       	cpi	r20, 0x01	; 1
 198:	71 f0       	breq	.+28     	; 0x1b6 <Dio_ChannelWrite+0x24>
 19a:	08 95       	ret
 19c:	fc 01       	movw	r30, r24
 19e:	40 81       	ld	r20, Z
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <Dio_ChannelWrite+0x18>
 1a6:	22 0f       	add	r18, r18
 1a8:	33 1f       	adc	r19, r19
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <Dio_ChannelWrite+0x14>
 1ae:	20 95       	com	r18
 1b0:	24 23       	and	r18, r20
 1b2:	20 83       	st	Z, r18
 1b4:	08 95       	ret
 1b6:	fc 01       	movw	r30, r24
 1b8:	40 81       	ld	r20, Z
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <Dio_ChannelWrite+0x32>
 1c0:	22 0f       	add	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <Dio_ChannelWrite+0x2e>
 1c8:	24 2b       	or	r18, r20
 1ca:	20 83       	st	Z, r18
 1cc:	08 95       	ret

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
