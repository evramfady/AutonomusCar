
iDrive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000006d8  0000076c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800072  00800072  0000077e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002243  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ded  00000000  00000000  00002bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e7c  00000000  00000000  000039bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00004838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a11  00000000  00000000  00004a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008af  00000000  00000000  000054a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005d54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c8 01 	call	0x390	; 0x390 <main>
  8a:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <motor_init>:
#include "motor_driver.h"
#include <util/delay.h>

void motor_init()
{
	Dio_ChannelDirectionSet(MOTORS_DIR,DIO_PIN0 , DIO_OUTPUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	84 e3       	ldi	r24, 0x34	; 52
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 08 02 	call	0x410	; 0x410 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(MOTORS_DIR,DIO_PIN1 , DIO_OUTPUT);
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	84 e3       	ldi	r24, 0x34	; 52
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 08 02 	call	0x410	; 0x410 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(MOTORS_DIR,DIO_PIN2 , DIO_OUTPUT);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	84 e3       	ldi	r24, 0x34	; 52
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 08 02 	call	0x410	; 0x410 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(MOTORS_DIR,DIO_PIN3 , DIO_OUTPUT);
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	63 e0       	ldi	r22, 0x03	; 3
  ba:	84 e3       	ldi	r24, 0x34	; 52
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 08 02 	call	0x410	; 0x410 <Dio_ChannelDirectionSet>
  c2:	08 95       	ret

000000c4 <motor_forward>:
}

void motor_forward()
{
	
	Dio_ChannelWrite(MOTORS_OUT,IN1,DIO_HIGH);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	85 e3       	ldi	r24, 0x35	; 53
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
	Dio_ChannelWrite(MOTORS_OUT,IN2,DIO_LOW);
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	85 e3       	ldi	r24, 0x35	; 53
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>

	Dio_ChannelWrite(MOTORS_OUT,IN3,DIO_LOW);
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	62 e0       	ldi	r22, 0x02	; 2
  e0:	85 e3       	ldi	r24, 0x35	; 53
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
	Dio_ChannelWrite(MOTORS_OUT,IN4,DIO_HIGH);
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	63 e0       	ldi	r22, 0x03	; 3
  ec:	85 e3       	ldi	r24, 0x35	; 53
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
  f4:	08 95       	ret

000000f6 <motor_brake>:
}

void motor_brake()
{
		
	Dio_ChannelWrite(MOTORS_OUT,IN1,DIO_LOW);
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	85 e3       	ldi	r24, 0x35	; 53
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
	Dio_ChannelWrite(MOTORS_OUT,IN4,DIO_LOW);
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	63 e0       	ldi	r22, 0x03	; 3
 106:	85 e3       	ldi	r24, 0x35	; 53
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
	
	Dio_ChannelWrite(MOTORS_OUT,IN2,DIO_HIGH);
 10e:	41 e0       	ldi	r20, 0x01	; 1
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	85 e3       	ldi	r24, 0x35	; 53
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
	Dio_ChannelWrite(MOTORS_OUT,IN3,DIO_HIGH);
 11a:	41 e0       	ldi	r20, 0x01	; 1
 11c:	62 e0       	ldi	r22, 0x02	; 2
 11e:	85 e3       	ldi	r24, 0x35	; 53
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	89 e6       	ldi	r24, 0x69	; 105
 12a:	98 e1       	ldi	r25, 0x18	; 24
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <motor_brake+0x36>
 134:	00 c0       	rjmp	.+0      	; 0x136 <motor_brake+0x40>
 136:	00 00       	nop
	
	_delay_ms(500U);
	
	Dio_ChannelWrite(MOTORS_OUT,IN2,DIO_LOW);
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	85 e3       	ldi	r24, 0x35	; 53
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
	Dio_ChannelWrite(MOTORS_OUT,IN3,DIO_LOW);
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	62 e0       	ldi	r22, 0x02	; 2
 148:	85 e3       	ldi	r24, 0x35	; 53
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
 150:	08 95       	ret

00000152 <motor_right>:
}

void motor_right()
{	
	
	Dio_ChannelWrite(MOTORS_OUT,IN2,DIO_HIGH);
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	85 e3       	ldi	r24, 0x35	; 53
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
	Dio_ChannelWrite(MOTORS_OUT,IN4,DIO_HIGH);
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	63 e0       	ldi	r22, 0x03	; 3
 162:	85 e3       	ldi	r24, 0x35	; 53
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	87 ea       	ldi	r24, 0xA7	; 167
 16e:	91 e6       	ldi	r25, 0x61	; 97
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <motor_right+0x1e>
 178:	00 c0       	rjmp	.+0      	; 0x17a <motor_right+0x28>
 17a:	00 00       	nop
	
	_delay_ms(2000U);

	Dio_ChannelWrite( MOTORS_OUT,IN2,DIO_LOW);
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	85 e3       	ldi	r24, 0x35	; 53
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
	Dio_ChannelWrite( MOTORS_OUT,IN4,DIO_LOW);
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	63 e0       	ldi	r22, 0x03	; 3
 18c:	85 e3       	ldi	r24, 0x35	; 53
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
 194:	08 95       	ret

00000196 <motor_left>:
}

void motor_left()
{
		
	Dio_ChannelWrite(MOTORS_OUT,IN1,DIO_HIGH);
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	85 e3       	ldi	r24, 0x35	; 53
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
	Dio_ChannelWrite(MOTORS_OUT,IN3,DIO_HIGH);
 1a2:	41 e0       	ldi	r20, 0x01	; 1
 1a4:	62 e0       	ldi	r22, 0x02	; 2
 1a6:	85 e3       	ldi	r24, 0x35	; 53
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	87 ea       	ldi	r24, 0xA7	; 167
 1b2:	91 e6       	ldi	r25, 0x61	; 97
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <motor_left+0x1e>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <motor_left+0x28>
 1be:	00 00       	nop
	
	_delay_ms(2000);

	Dio_ChannelWrite( MOTORS_OUT,IN1,DIO_LOW);
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	85 e3       	ldi	r24, 0x35	; 53
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
	Dio_ChannelWrite( MOTORS_OUT,IN3,DIO_LOW);
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	85 e3       	ldi	r24, 0x35	; 53
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
 1d8:	08 95       	ret

000001da <Servo_Init>:
#include <util/delay.h>

void Servo_Init( uint8* port ,DioPinEnum_t pin)
{
	
	 Dio_ChannelDirectionSet(port,pin,DIO_OUTPUT);
 1da:	41 e0       	ldi	r20, 0x01	; 1
 1dc:	0e 94 08 02 	call	0x410	; 0x410 <Dio_ChannelDirectionSet>
 1e0:	08 95       	ret

000001e2 <Servo_Rotate>:
}

void Servo_Rotate( uint8* port ,DioPinEnum_t pin,sint8 degree)
{
 1e2:	cf 93       	push	r28
 1e4:	c4 2f       	mov	r28, r20
	 Dio_ChannelWrite(port,pin,DIO_HIGH);
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
	 
	 switch (degree)
 1ec:	cc 23       	and	r28, r28
 1ee:	29 f0       	breq	.+10     	; 0x1fa <Servo_Rotate+0x18>
 1f0:	ca 35       	cpi	r28, 0x5A	; 90
 1f2:	51 f0       	breq	.+20     	; 0x208 <Servo_Rotate+0x26>
 1f4:	c6 3a       	cpi	r28, 0xA6	; 166
 1f6:	b1 f4       	brne	.+44     	; 0x224 <Servo_Rotate+0x42>
 1f8:	0e c0       	rjmp	.+28     	; 0x216 <Servo_Rotate+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	8f e6       	ldi	r24, 0x6F	; 111
 1fc:	97 e1       	ldi	r25, 0x17	; 23
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <Servo_Rotate+0x1c>
 202:	00 c0       	rjmp	.+0      	; 0x204 <Servo_Rotate+0x22>
 204:	00 00       	nop
 206:	14 c0       	rjmp	.+40     	; 0x230 <Servo_Rotate+0x4e>
 208:	8f e3       	ldi	r24, 0x3F	; 63
 20a:	9f e1       	ldi	r25, 0x1F	; 31
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <Servo_Rotate+0x2a>
 210:	00 c0       	rjmp	.+0      	; 0x212 <Servo_Rotate+0x30>
 212:	00 00       	nop
 214:	0d c0       	rjmp	.+26     	; 0x230 <Servo_Rotate+0x4e>
 216:	8f e9       	ldi	r24, 0x9F	; 159
 218:	9f e0       	ldi	r25, 0x0F	; 15
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <Servo_Rotate+0x38>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <Servo_Rotate+0x3e>
 220:	00 00       	nop
 222:	06 c0       	rjmp	.+12     	; 0x230 <Servo_Rotate+0x4e>
 224:	8f e3       	ldi	r24, 0x3F	; 63
 226:	9f e1       	ldi	r25, 0x1F	; 31
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <Servo_Rotate+0x46>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <Servo_Rotate+0x4c>
 22e:	00 00       	nop
	  break;

	 Dio_ChannelWrite(port,pin,DIO_LOW);
	 _delay_ms(20U);
   }
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <Sw_init>:
 234:	40 e0       	ldi	r20, 0x00	; 0
 236:	0e 94 08 02 	call	0x410	; 0x410 <Dio_ChannelDirectionSet>
 23a:	08 95       	ret

0000023c <Sw_StateGet>:
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	ec 01       	movw	r28, r24
 244:	16 2f       	mov	r17, r22
 246:	0e 94 26 02 	call	0x44c	; 0x44c <Dio_ChannelRead>
 24a:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <__data_end>
 24e:	89 17       	cp	r24, r25
 250:	91 f0       	breq	.+36     	; 0x276 <Sw_StateGet+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	2f ef       	ldi	r18, 0xFF	; 255
 254:	89 ef       	ldi	r24, 0xF9	; 249
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <Sw_StateGet+0x1c>
 260:	00 c0       	rjmp	.+0      	; 0x262 <Sw_StateGet+0x26>
 262:	00 00       	nop
 264:	61 2f       	mov	r22, r17
 266:	ce 01       	movw	r24, r28
 268:	0e 94 26 02 	call	0x44c	; 0x44c <Dio_ChannelRead>
 26c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	19 f4       	brne	.+6      	; 0x27a <Sw_StateGet+0x3e>
 274:	03 c0       	rjmp	.+6      	; 0x27c <Sw_StateGet+0x40>
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	01 c0       	rjmp	.+2      	; 0x27c <Sw_StateGet+0x40>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	08 95       	ret

00000284 <Ultrasonic_Init>:
#include "ATmega32_Cfg.h"

void Ultrasonic_Init(void)
{
	//for operating sensor
	Dio_ChannelDirectionSet(PORTA_DIR_REG,DIO_PIN0,DIO_OUTPUT);
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	8a e3       	ldi	r24, 0x3A	; 58
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 08 02 	call	0x410	; 0x410 <Dio_ChannelDirectionSet>
	Dio_ChannelWrite(PORTA_OUT_REG,DIO_PIN0,DIO_HIGH);
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	8b e3       	ldi	r24, 0x3B	; 59
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
	
	// enabling interrupts to any logical change
	Ext_Interrupts_Enable(EXT_INT0,EXT_INT_BOTH_EDGES);
 29c:	63 e0       	ldi	r22, 0x03	; 3
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 b8 02 	call	0x570	; 0x570 <Ext_Interrupts_Enable>
	Global_Interrupts_StateSet(GLOBAL_INT_ENABLE);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <Global_Interrupts_StateSet>

	Gpt_Init(&gaStrGpt_Configuration[GPT_TIMER0]);
 2aa:	80 e6       	ldi	r24, 0x60	; 96
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Gpt_Init>
	
	// Setting Trig and Echo Low to initialize module
	Dio_ChannelDirectionSet(Ultra_Sonic_DIR_REG, TRIGGER, DIO_OUTPUT);
 2b2:	41 e0       	ldi	r20, 0x01	; 1
 2b4:	62 e0       	ldi	r22, 0x02	; 2
 2b6:	84 e3       	ldi	r24, 0x34	; 52
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 08 02 	call	0x410	; 0x410 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(Ultra_Sonic_DIR_REG, ECHO, DIO_OUTPUT);
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	63 e0       	ldi	r22, 0x03	; 3
 2c2:	84 e3       	ldi	r24, 0x34	; 52
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 08 02 	call	0x410	; 0x410 <Dio_ChannelDirectionSet>
	Dio_ChannelWrite(Ultra_Sonic_OUT_REG,TRIGGER,DIO_LOW);
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	62 e0       	ldi	r22, 0x02	; 2
 2ce:	85 e3       	ldi	r24, 0x35	; 53
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
	Dio_ChannelWrite(Ultra_Sonic_OUT_REG,ECHO,DIO_LOW);
 2d6:	40 e0       	ldi	r20, 0x00	; 0
 2d8:	63 e0       	ldi	r22, 0x03	; 3
 2da:	85 e3       	ldi	r24, 0x35	; 53
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
	
	// setting directions
	Dio_ChannelDirectionSet(Ultra_Sonic_DIR_REG, TRIGGER, DIO_OUTPUT);
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	62 e0       	ldi	r22, 0x02	; 2
 2e6:	84 e3       	ldi	r24, 0x34	; 52
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 08 02 	call	0x410	; 0x410 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(Ultra_Sonic_DIR_REG, ECHO, DIO_INPUT);
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	63 e0       	ldi	r22, 0x03	; 3
 2f2:	84 e3       	ldi	r24, 0x34	; 52
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 08 02 	call	0x410	; 0x410 <Dio_ChannelDirectionSet>
 2fa:	08 95       	ret

000002fc <Measure_Distance>:
	
	while(1)
	{
		
	//Placeing a minimum 10us High level pulse to "Trigger"
    Dio_ChannelWrite(Ultra_Sonic_OUT_REG,TRIGGER,DIO_HIGH);        //The PIN is set high (5V)
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	62 e0       	ldi	r22, 0x02	; 2
 300:	85 e3       	ldi	r24, 0x35	; 53
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 308:	80 e4       	ldi	r24, 0x40	; 64
 30a:	8a 95       	dec	r24
 30c:	f1 f7       	brne	.-4      	; 0x30a <Measure_Distance+0xe>
    _delay_us(12U);                                               //A delay of 12 Microseconds is given
    Dio_ChannelWrite(Ultra_Sonic_OUT_REG,TRIGGER,DIO_LOW);       //The PIN D0 is again set to Low (0v)
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	62 e0       	ldi	r22, 0x02	; 2
 312:	85 e3       	ldi	r24, 0x35	; 53
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 3b 02 	call	0x476	; 0x476 <Dio_ChannelWrite>
 31a:	80 e4       	ldi	r24, 0x40	; 64
 31c:	8a 95       	dec	r24
 31e:	f1 f7       	brne	.-4      	; 0x31c <Measure_Distance+0x20>
    _delay_us(12U);
	
	    Distance_cm = pulse/58;
 320:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <pulse>
 324:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <pulse+0x1>
 328:	6a e3       	ldi	r22, 0x3A	; 58
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	0e 94 42 03 	call	0x684	; 0x684 <__divmodhi4>
 330:	70 93 74 00 	sts	0x0074, r23	; 0x800074 <Distance_cm+0x1>
 334:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <Distance_cm>
 338:	e1 cf       	rjmp	.-62     	; 0x2fc <Measure_Distance>

0000033a <__vector_1>:
	
    return Distance_cm;
}

ISR(INT0_vect)
{
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
	
	if(i == 0)
 348:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <i>
 34c:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <i+0x1>
 350:	89 2b       	or	r24, r25
 352:	51 f4       	brne	.+20     	; 0x368 <__vector_1+0x2e>
	{
		TCCR1B |= 1<<CS10;
 354:	8e b5       	in	r24, 0x2e	; 46
 356:	81 60       	ori	r24, 0x01	; 1
 358:	8e bd       	out	0x2e, r24	; 46
		i = 1;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <i+0x1>
 362:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <i>
 366:	0d c0       	rjmp	.+26     	; 0x382 <__vector_1+0x48>
	}
	else
	{
		TCCR1B = 0;
 368:	1e bc       	out	0x2e, r1	; 46
		pulse = TCNT1;
 36a:	8c b5       	in	r24, 0x2c	; 44
 36c:	9d b5       	in	r25, 0x2d	; 45
 36e:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <pulse+0x1>
 372:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <pulse>
		TCNT1 = 0;
 376:	1d bc       	out	0x2d, r1	; 45
 378:	1c bc       	out	0x2c, r1	; 44
		i = 0;
 37a:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <i+0x1>
 37e:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <i>
	}
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <main>:
#include "Ext_Interrupts.h"
#include "Servo.h"

int main(void)
{
	Sw_init(PORTD_DIR_REG,SW1);
 390:	66 e0       	ldi	r22, 0x06	; 6
 392:	81 e3       	ldi	r24, 0x31	; 49
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 1a 01 	call	0x234	; 0x234 <Sw_init>
	Servo_Init(PORTD_DIR_REG,DIO_PIN7);
 39a:	67 e0       	ldi	r22, 0x07	; 7
 39c:	81 e3       	ldi	r24, 0x31	; 49
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 ed 00 	call	0x1da	; 0x1da <Servo_Init>
	Ultrasonic_Init();
 3a4:	0e 94 42 01 	call	0x284	; 0x284 <Ultrasonic_Init>
	motor_init();
 3a8:	0e 94 49 00 	call	0x92	; 0x92 <motor_init>
	uint8 flag =0;
	uint16 left=0;
	uint16 right=0;
	
	Sw_StateEnum_t  Sw_State = Sw_StateGet(PORTD_INP_REG,SW1);
 3ac:	66 e0       	ldi	r22, 0x06	; 6
 3ae:	80 e3       	ldi	r24, 0x30	; 48
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 1e 01 	call	0x23c	; 0x23c <Sw_StateGet>

	switch (Sw_State)
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	11 f0       	breq	.+4      	; 0x3be <main+0x2e>
{
	Sw_init(PORTD_DIR_REG,SW1);
	Servo_Init(PORTD_DIR_REG,DIO_PIN7);
	Ultrasonic_Init();
	motor_init();
	uint8 flag =0;
 3ba:	c0 e0       	ldi	r28, 0x00	; 0
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <main+0x30>
	Sw_StateEnum_t  Sw_State = Sw_StateGet(PORTD_INP_REG,SW1);

	switch (Sw_State)
	{
		case SW_PRESSED:
		flag=1;
 3be:	c1 e0       	ldi	r28, 0x01	; 1
	
	
	while(1)
	{
		
	if (flag==1)
 3c0:	c1 30       	cpi	r28, 0x01	; 1
 3c2:	19 f5       	brne	.+70     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     {
		 Servo_Rotate(PORTD_OUT_REG,DIO_PIN7,90);
 3c4:	4a e5       	ldi	r20, 0x5A	; 90
 3c6:	67 e0       	ldi	r22, 0x07	; 7
 3c8:	82 e3       	ldi	r24, 0x32	; 50
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <Servo_Rotate>
		 left=Measure_Distance();
 3d0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Measure_Distance>
 3d4:	8b 01       	movw	r16, r22
		 Servo_Rotate(PORTD_OUT_REG,DIO_PIN7,-90);
 3d6:	46 ea       	ldi	r20, 0xA6	; 166
 3d8:	67 e0       	ldi	r22, 0x07	; 7
 3da:	82 e3       	ldi	r24, 0x32	; 50
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <Servo_Rotate>
		 right=Measure_Distance();
 3e2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Measure_Distance>
 3e6:	7b 01       	movw	r14, r22
		 Servo_Rotate(PORTD_OUT_REG,DIO_PIN7,0);
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	67 e0       	ldi	r22, 0x07	; 7
 3ec:	82 e3       	ldi	r24, 0x32	; 50
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <Servo_Rotate>
		 
		 
		if (left>=right)
 3f4:	0e 15       	cp	r16, r14
 3f6:	1f 05       	cpc	r17, r15
 3f8:	18 f0       	brcs	.+6      	; 0x400 <__EEPROM_REGION_LENGTH__>
		{
			motor_left();
 3fa:	0e 94 cb 00 	call	0x196	; 0x196 <motor_left>
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		}
	  else 
	  {
		motor_right();
 400:	0e 94 a9 00 	call	0x152	; 0x152 <motor_right>
	  }
		
		motor_forward();
 404:	0e 94 62 00 	call	0xc4	; 0xc4 <motor_forward>
 408:	db cf       	rjmp	.-74     	; 0x3c0 <main+0x30>
	    } else {
		motor_brake();
 40a:	0e 94 7b 00 	call	0xf6	; 0xf6 <motor_brake>
 40e:	d8 cf       	rjmp	.-80     	; 0x3c0 <main+0x30>

00000410 <Dio_ChannelDirectionSet>:
 410:	44 23       	and	r20, r20
 412:	19 f0       	breq	.+6      	; 0x41a <Dio_ChannelDirectionSet+0xa>
 414:	41 30       	cpi	r20, 0x01	; 1
 416:	71 f0       	breq	.+28     	; 0x434 <Dio_ChannelDirectionSet+0x24>
 418:	08 95       	ret
 41a:	fc 01       	movw	r30, r24
 41c:	40 81       	ld	r20, Z
 41e:	21 e0       	ldi	r18, 0x01	; 1
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	02 c0       	rjmp	.+4      	; 0x428 <Dio_ChannelDirectionSet+0x18>
 424:	22 0f       	add	r18, r18
 426:	33 1f       	adc	r19, r19
 428:	6a 95       	dec	r22
 42a:	e2 f7       	brpl	.-8      	; 0x424 <Dio_ChannelDirectionSet+0x14>
 42c:	20 95       	com	r18
 42e:	24 23       	and	r18, r20
 430:	20 83       	st	Z, r18
 432:	08 95       	ret
 434:	fc 01       	movw	r30, r24
 436:	40 81       	ld	r20, Z
 438:	21 e0       	ldi	r18, 0x01	; 1
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <Dio_ChannelDirectionSet+0x32>
 43e:	22 0f       	add	r18, r18
 440:	33 1f       	adc	r19, r19
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <Dio_ChannelDirectionSet+0x2e>
 446:	24 2b       	or	r18, r20
 448:	20 83       	st	Z, r18
 44a:	08 95       	ret

0000044c <Dio_ChannelRead>:
 44c:	fc 01       	movw	r30, r24
 44e:	40 81       	ld	r20, Z
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	9c 01       	movw	r18, r24
 456:	06 2e       	mov	r0, r22
 458:	02 c0       	rjmp	.+4      	; 0x45e <Dio_ChannelRead+0x12>
 45a:	22 0f       	add	r18, r18
 45c:	33 1f       	adc	r19, r19
 45e:	0a 94       	dec	r0
 460:	e2 f7       	brpl	.-8      	; 0x45a <Dio_ChannelRead+0xe>
 462:	84 2f       	mov	r24, r20
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	82 23       	and	r24, r18
 468:	93 23       	and	r25, r19
 46a:	02 c0       	rjmp	.+4      	; 0x470 <Dio_ChannelRead+0x24>
 46c:	96 95       	lsr	r25
 46e:	87 95       	ror	r24
 470:	6a 95       	dec	r22
 472:	e2 f7       	brpl	.-8      	; 0x46c <Dio_ChannelRead+0x20>
 474:	08 95       	ret

00000476 <Dio_ChannelWrite>:
 476:	44 23       	and	r20, r20
 478:	19 f0       	breq	.+6      	; 0x480 <Dio_ChannelWrite+0xa>
 47a:	41 30       	cpi	r20, 0x01	; 1
 47c:	71 f0       	breq	.+28     	; 0x49a <Dio_ChannelWrite+0x24>
 47e:	08 95       	ret
 480:	fc 01       	movw	r30, r24
 482:	40 81       	ld	r20, Z
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	02 c0       	rjmp	.+4      	; 0x48e <Dio_ChannelWrite+0x18>
 48a:	22 0f       	add	r18, r18
 48c:	33 1f       	adc	r19, r19
 48e:	6a 95       	dec	r22
 490:	e2 f7       	brpl	.-8      	; 0x48a <Dio_ChannelWrite+0x14>
 492:	20 95       	com	r18
 494:	24 23       	and	r18, r20
 496:	20 83       	st	Z, r18
 498:	08 95       	ret
 49a:	fc 01       	movw	r30, r24
 49c:	40 81       	ld	r20, Z
 49e:	21 e0       	ldi	r18, 0x01	; 1
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <Dio_ChannelWrite+0x32>
 4a4:	22 0f       	add	r18, r18
 4a6:	33 1f       	adc	r19, r19
 4a8:	6a 95       	dec	r22
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <Dio_ChannelWrite+0x2e>
 4ac:	24 2b       	or	r18, r20
 4ae:	20 83       	st	Z, r18
 4b0:	08 95       	ret

000004b2 <Ext_Interrupt_ModeSet>:
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	f1 f0       	breq	.+60     	; 0x4f2 <Ext_Interrupt_ModeSet+0x40>
 4b6:	30 f0       	brcs	.+12     	; 0x4c4 <Ext_Interrupt_ModeSet+0x12>
 4b8:	82 30       	cpi	r24, 0x02	; 2
 4ba:	89 f1       	breq	.+98     	; 0x51e <Ext_Interrupt_ModeSet+0x6c>
 4bc:	83 30       	cpi	r24, 0x03	; 3
 4be:	09 f4       	brne	.+2      	; 0x4c2 <Ext_Interrupt_ModeSet+0x10>
 4c0:	42 c0       	rjmp	.+132    	; 0x546 <Ext_Interrupt_ModeSet+0x94>
 4c2:	08 95       	ret
 4c4:	35 b7       	in	r19, 0x35	; 53
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	fc 01       	movw	r30, r24
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <Ext_Interrupt_ModeSet+0x20>
 4ce:	ee 0f       	add	r30, r30
 4d0:	ff 1f       	adc	r31, r31
 4d2:	6a 95       	dec	r22
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <Ext_Interrupt_ModeSet+0x1c>
 4d6:	2e 2f       	mov	r18, r30
 4d8:	20 95       	com	r18
 4da:	23 23       	and	r18, r19
 4dc:	25 bf       	out	0x35, r18	; 53
 4de:	25 b7       	in	r18, 0x35	; 53
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <Ext_Interrupt_ModeSet+0x34>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	4a 95       	dec	r20
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <Ext_Interrupt_ModeSet+0x30>
 4ea:	80 95       	com	r24
 4ec:	82 23       	and	r24, r18
 4ee:	85 bf       	out	0x35, r24	; 53
 4f0:	08 95       	ret
 4f2:	35 b7       	in	r19, 0x35	; 53
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	fc 01       	movw	r30, r24
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <Ext_Interrupt_ModeSet+0x4e>
 4fc:	ee 0f       	add	r30, r30
 4fe:	ff 1f       	adc	r31, r31
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <Ext_Interrupt_ModeSet+0x4a>
 504:	2e 2f       	mov	r18, r30
 506:	20 95       	com	r18
 508:	23 23       	and	r18, r19
 50a:	25 bf       	out	0x35, r18	; 53
 50c:	25 b7       	in	r18, 0x35	; 53
 50e:	02 c0       	rjmp	.+4      	; 0x514 <Ext_Interrupt_ModeSet+0x62>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	4a 95       	dec	r20
 516:	e2 f7       	brpl	.-8      	; 0x510 <Ext_Interrupt_ModeSet+0x5e>
 518:	82 2b       	or	r24, r18
 51a:	85 bf       	out	0x35, r24	; 53
 51c:	08 95       	ret
 51e:	55 b7       	in	r21, 0x35	; 53
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	9c 01       	movw	r18, r24
 526:	02 c0       	rjmp	.+4      	; 0x52c <Ext_Interrupt_ModeSet+0x7a>
 528:	22 0f       	add	r18, r18
 52a:	33 1f       	adc	r19, r19
 52c:	6a 95       	dec	r22
 52e:	e2 f7       	brpl	.-8      	; 0x528 <Ext_Interrupt_ModeSet+0x76>
 530:	25 2b       	or	r18, r21
 532:	25 bf       	out	0x35, r18	; 53
 534:	25 b7       	in	r18, 0x35	; 53
 536:	02 c0       	rjmp	.+4      	; 0x53c <Ext_Interrupt_ModeSet+0x8a>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	4a 95       	dec	r20
 53e:	e2 f7       	brpl	.-8      	; 0x538 <Ext_Interrupt_ModeSet+0x86>
 540:	82 2b       	or	r24, r18
 542:	85 bf       	out	0x35, r24	; 53
 544:	08 95       	ret
 546:	55 b7       	in	r21, 0x35	; 53
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	9c 01       	movw	r18, r24
 54e:	02 c0       	rjmp	.+4      	; 0x554 <Ext_Interrupt_ModeSet+0xa2>
 550:	22 0f       	add	r18, r18
 552:	33 1f       	adc	r19, r19
 554:	6a 95       	dec	r22
 556:	e2 f7       	brpl	.-8      	; 0x550 <Ext_Interrupt_ModeSet+0x9e>
 558:	25 2b       	or	r18, r21
 55a:	25 bf       	out	0x35, r18	; 53
 55c:	25 b7       	in	r18, 0x35	; 53
 55e:	02 c0       	rjmp	.+4      	; 0x564 <Ext_Interrupt_ModeSet+0xb2>
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	4a 95       	dec	r20
 566:	e2 f7       	brpl	.-8      	; 0x560 <Ext_Interrupt_ModeSet+0xae>
 568:	80 95       	com	r24
 56a:	82 23       	and	r24, r18
 56c:	85 bf       	out	0x35, r24	; 53
 56e:	08 95       	ret

00000570 <Ext_Interrupts_Enable>:
 570:	96 2f       	mov	r25, r22
 572:	81 30       	cpi	r24, 0x01	; 1
 574:	69 f0       	breq	.+26     	; 0x590 <Ext_Interrupts_Enable+0x20>
 576:	18 f0       	brcs	.+6      	; 0x57e <Ext_Interrupts_Enable+0xe>
 578:	82 30       	cpi	r24, 0x02	; 2
 57a:	99 f0       	breq	.+38     	; 0x5a2 <Ext_Interrupts_Enable+0x32>
 57c:	08 95       	ret
 57e:	41 e0       	ldi	r20, 0x01	; 1
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	89 2f       	mov	r24, r25
 584:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Ext_Interrupt_ModeSet>
 588:	8b b7       	in	r24, 0x3b	; 59
 58a:	80 64       	ori	r24, 0x40	; 64
 58c:	8b bf       	out	0x3b, r24	; 59
 58e:	08 95       	ret
 590:	43 e0       	ldi	r20, 0x03	; 3
 592:	62 e0       	ldi	r22, 0x02	; 2
 594:	89 2f       	mov	r24, r25
 596:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Ext_Interrupt_ModeSet>
 59a:	8b b7       	in	r24, 0x3b	; 59
 59c:	80 68       	ori	r24, 0x80	; 128
 59e:	8b bf       	out	0x3b, r24	; 59
 5a0:	08 95       	ret
 5a2:	61 30       	cpi	r22, 0x01	; 1
 5a4:	19 f0       	breq	.+6      	; 0x5ac <Ext_Interrupts_Enable+0x3c>
 5a6:	62 30       	cpi	r22, 0x02	; 2
 5a8:	29 f0       	breq	.+10     	; 0x5b4 <Ext_Interrupts_Enable+0x44>
 5aa:	07 c0       	rjmp	.+14     	; 0x5ba <Ext_Interrupts_Enable+0x4a>
 5ac:	84 b7       	in	r24, 0x34	; 52
 5ae:	8f 7b       	andi	r24, 0xBF	; 191
 5b0:	84 bf       	out	0x34, r24	; 52
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <Ext_Interrupts_Enable+0x4a>
 5b4:	84 b7       	in	r24, 0x34	; 52
 5b6:	80 64       	ori	r24, 0x40	; 64
 5b8:	84 bf       	out	0x34, r24	; 52
 5ba:	8b b7       	in	r24, 0x3b	; 59
 5bc:	80 62       	ori	r24, 0x20	; 32
 5be:	8b bf       	out	0x3b, r24	; 59
 5c0:	08 95       	ret

000005c2 <Global_Interrupts_StateSet>:
 5c2:	88 23       	and	r24, r24
 5c4:	19 f0       	breq	.+6      	; 0x5cc <Global_Interrupts_StateSet+0xa>
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	29 f0       	breq	.+10     	; 0x5d4 <Global_Interrupts_StateSet+0x12>
 5ca:	08 95       	ret
 5cc:	8f b7       	in	r24, 0x3f	; 63
 5ce:	8f 77       	andi	r24, 0x7F	; 127
 5d0:	8f bf       	out	0x3f, r24	; 63
 5d2:	08 95       	ret
 5d4:	8f b7       	in	r24, 0x3f	; 63
 5d6:	80 68       	ori	r24, 0x80	; 128
 5d8:	8f bf       	out	0x3f, r24	; 63
 5da:	08 95       	ret

000005dc <Gpt_Init>:
 5dc:	fc 01       	movw	r30, r24
 5de:	80 81       	ld	r24, Z
 5e0:	88 23       	and	r24, r24
 5e2:	19 f0       	breq	.+6      	; 0x5ea <Gpt_Init+0xe>
 5e4:	81 30       	cpi	r24, 0x01	; 1
 5e6:	19 f1       	breq	.+70     	; 0x62e <Gpt_Init+0x52>
 5e8:	08 95       	ret
 5ea:	13 be       	out	0x33, r1	; 51
 5ec:	81 81       	ldd	r24, Z+1	; 0x01
 5ee:	88 23       	and	r24, r24
 5f0:	19 f0       	breq	.+6      	; 0x5f8 <Gpt_Init+0x1c>
 5f2:	88 30       	cpi	r24, 0x08	; 8
 5f4:	41 f0       	breq	.+16     	; 0x606 <Gpt_Init+0x2a>
 5f6:	15 c0       	rjmp	.+42     	; 0x622 <Gpt_Init+0x46>
 5f8:	83 b7       	in	r24, 0x33	; 51
 5fa:	83 bf       	out	0x33, r24	; 51
 5fc:	99 b7       	in	r25, 0x39	; 57
 5fe:	83 81       	ldd	r24, Z+3	; 0x03
 600:	89 2b       	or	r24, r25
 602:	89 bf       	out	0x39, r24	; 57
 604:	0e c0       	rjmp	.+28     	; 0x622 <Gpt_Init+0x46>
 606:	83 b7       	in	r24, 0x33	; 51
 608:	88 60       	ori	r24, 0x08	; 8
 60a:	83 bf       	out	0x33, r24	; 51
 60c:	29 b7       	in	r18, 0x39	; 57
 60e:	93 81       	ldd	r25, Z+3	; 0x03
 610:	89 2f       	mov	r24, r25
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	82 2b       	or	r24, r18
 61a:	89 bf       	out	0x39, r24	; 57
 61c:	84 81       	ldd	r24, Z+4	; 0x04
 61e:	81 50       	subi	r24, 0x01	; 1
 620:	8c bf       	out	0x3c, r24	; 60
 622:	93 b7       	in	r25, 0x33	; 51
 624:	82 81       	ldd	r24, Z+2	; 0x02
 626:	89 2b       	or	r24, r25
 628:	83 bf       	out	0x33, r24	; 51
 62a:	12 be       	out	0x32, r1	; 50
 62c:	08 95       	ret
 62e:	1e bc       	out	0x2e, r1	; 46
 630:	1d bc       	out	0x2d, r1	; 45
 632:	1c bc       	out	0x2c, r1	; 44
 634:	81 81       	ldd	r24, Z+1	; 0x01
 636:	88 23       	and	r24, r24
 638:	19 f0       	breq	.+6      	; 0x640 <Gpt_Init+0x64>
 63a:	88 30       	cpi	r24, 0x08	; 8
 63c:	71 f0       	breq	.+28     	; 0x65a <Gpt_Init+0x7e>
 63e:	1d c0       	rjmp	.+58     	; 0x67a <Gpt_Init+0x9e>
 640:	8e b5       	in	r24, 0x2e	; 46
 642:	8e bd       	out	0x2e, r24	; 46
 644:	29 b7       	in	r18, 0x39	; 57
 646:	93 81       	ldd	r25, Z+3	; 0x03
 648:	89 2f       	mov	r24, r25
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	82 2b       	or	r24, r18
 656:	89 bf       	out	0x39, r24	; 57
 658:	10 c0       	rjmp	.+32     	; 0x67a <Gpt_Init+0x9e>
 65a:	8e b5       	in	r24, 0x2e	; 46
 65c:	88 60       	ori	r24, 0x08	; 8
 65e:	8e bd       	out	0x2e, r24	; 46
 660:	29 b7       	in	r18, 0x39	; 57
 662:	93 81       	ldd	r25, Z+3	; 0x03
 664:	30 e1       	ldi	r19, 0x10	; 16
 666:	93 9f       	mul	r25, r19
 668:	c0 01       	movw	r24, r0
 66a:	11 24       	eor	r1, r1
 66c:	82 2b       	or	r24, r18
 66e:	89 bf       	out	0x39, r24	; 57
 670:	84 81       	ldd	r24, Z+4	; 0x04
 672:	95 81       	ldd	r25, Z+5	; 0x05
 674:	01 97       	sbiw	r24, 0x01	; 1
 676:	9b bd       	out	0x2b, r25	; 43
 678:	8a bd       	out	0x2a, r24	; 42
 67a:	9e b5       	in	r25, 0x2e	; 46
 67c:	82 81       	ldd	r24, Z+2	; 0x02
 67e:	89 2b       	or	r24, r25
 680:	8e bd       	out	0x2e, r24	; 46
 682:	08 95       	ret

00000684 <__divmodhi4>:
 684:	97 fb       	bst	r25, 7
 686:	07 2e       	mov	r0, r23
 688:	16 f4       	brtc	.+4      	; 0x68e <__divmodhi4+0xa>
 68a:	00 94       	com	r0
 68c:	07 d0       	rcall	.+14     	; 0x69c <__divmodhi4_neg1>
 68e:	77 fd       	sbrc	r23, 7
 690:	09 d0       	rcall	.+18     	; 0x6a4 <__divmodhi4_neg2>
 692:	0e 94 56 03 	call	0x6ac	; 0x6ac <__udivmodhi4>
 696:	07 fc       	sbrc	r0, 7
 698:	05 d0       	rcall	.+10     	; 0x6a4 <__divmodhi4_neg2>
 69a:	3e f4       	brtc	.+14     	; 0x6aa <__divmodhi4_exit>

0000069c <__divmodhi4_neg1>:
 69c:	90 95       	com	r25
 69e:	81 95       	neg	r24
 6a0:	9f 4f       	sbci	r25, 0xFF	; 255
 6a2:	08 95       	ret

000006a4 <__divmodhi4_neg2>:
 6a4:	70 95       	com	r23
 6a6:	61 95       	neg	r22
 6a8:	7f 4f       	sbci	r23, 0xFF	; 255

000006aa <__divmodhi4_exit>:
 6aa:	08 95       	ret

000006ac <__udivmodhi4>:
 6ac:	aa 1b       	sub	r26, r26
 6ae:	bb 1b       	sub	r27, r27
 6b0:	51 e1       	ldi	r21, 0x11	; 17
 6b2:	07 c0       	rjmp	.+14     	; 0x6c2 <__udivmodhi4_ep>

000006b4 <__udivmodhi4_loop>:
 6b4:	aa 1f       	adc	r26, r26
 6b6:	bb 1f       	adc	r27, r27
 6b8:	a6 17       	cp	r26, r22
 6ba:	b7 07       	cpc	r27, r23
 6bc:	10 f0       	brcs	.+4      	; 0x6c2 <__udivmodhi4_ep>
 6be:	a6 1b       	sub	r26, r22
 6c0:	b7 0b       	sbc	r27, r23

000006c2 <__udivmodhi4_ep>:
 6c2:	88 1f       	adc	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	5a 95       	dec	r21
 6c8:	a9 f7       	brne	.-22     	; 0x6b4 <__udivmodhi4_loop>
 6ca:	80 95       	com	r24
 6cc:	90 95       	com	r25
 6ce:	bc 01       	movw	r22, r24
 6d0:	cd 01       	movw	r24, r26
 6d2:	08 95       	ret

000006d4 <_exit>:
 6d4:	f8 94       	cli

000006d6 <__stop_program>:
 6d6:	ff cf       	rjmp	.-2      	; 0x6d6 <__stop_program>
